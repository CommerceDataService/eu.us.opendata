results <- data.frame((table(flag)))
results$series <- (as.character(results$flag))
results <- results[order(-results$Freq),]
results$rel_score <- 100*results$Freq/max(results$Freq)
#Print results to console
results <- merge(data,results,by.x="Rel_name",by.y="series")
results <- results[,c("rel_score","Rel_ID","Rel_name")]
print(paste("RESULTS FOR TERM = '", term,"'",sep=""))
print(results)
#payload results <-- need to add Rel_ID
return(results)
} else{
print("No matches")
}
}
#res <- searchRel("county")
searchRel(" ")
trimws(" ")
#' Search Metadata Store Relationship Table using text search
#'
#' @return
#' @import DT
#' @export
searchRel <- function(term){
flag <- c()
if(nchar(trimws(term))!= 0){
split <- unlist(strsplit(gsub("[[:punct:]]","",term),"[[:space:]]"))
#stage one -- canonical, RelTable table will go here -- will loadLocalRel.r run at some point before?
localRel <- loadLocalRel()
data <- as.data.frame(localRel[, 1:2, with = FALSE])
#independent search, iter max distance from 0:n, search by term, return vector of quasi-matched terms
#Scrapped pure regex in this round
for(i in 0:5){
for(k in split){
flag <- c(flag,
data[agrep(k, data[,2], max = i, ignore.case = TRUE),2])
}
}
}
#Check if there are any results
if(length(flag)>0){
#recommended relative rankings
results <- data.frame((table(flag)))
results$series <- (as.character(results$flag))
results <- results[order(-results$Freq),]
results$rel_score <- 100*results$Freq/max(results$Freq)
#Print results to console
results <- merge(data,results,by.x="Rel_name",by.y="series")
results <- results[,c("rel_score","Rel_ID","Rel_name")]
print(paste("RESULTS FOR TERM = '", term,"'",sep=""))
print(results)
#payload results <-- need to add Rel_ID
return(results)
} else{
print("No matches")
}
}
#res <- searchRel("county")
searchRel(" ")
#' Search Metadata Store Relationship Table using text search
#'
#' @return
#' @import DT
#' @export
searchRel <- function(term){
flag <- c()
#Check if there is any term that is passed into the function
if(nchar(trimws(term))!= 0){
split <- unlist(strsplit(gsub("[[:punct:]]","",term),"[[:space:]]"))
#Step one -- canonical, RelTable table will go here -- will loadLocalRel.r run at some point before?
localRel <- loadLocalRel()
data <- as.data.frame(localRel[, 1:2, with = FALSE])
#Step two: Scrapped pure regex in this round
for(i in 0:5){
for(k in split){
flag <- c(flag,
data[agrep(k, data[,2], max = i, ignore.case = TRUE),2])
}
}
}
#Check if there are any results
if(length(flag)>0){
#recommended relative rankings
results <- data.frame((table(flag)))
results$series <- (as.character(results$flag))
results <- results[order(-results$Freq),]
results$rel_score <- 100*results$Freq/max(results$Freq)
#Print results to console
results <- merge(data,results,by.x="Rel_name",by.y="series")
results <- results[,c("rel_score","Rel_ID","Rel_name")]
print(paste("RESULTS FOR TERM = '", term,"'",sep=""))
print(results)
#payload results <-- need to add Rel_ID
return(results)
} else{
print("No matches")
}
}
#res <- searchRel("county")
searchRel("Annual")
searchRel("GDP")
searchRel("howdy")
searchRel("zasgeornkgitl")
searchRel("taggalit")
#' Search Metadata Store Relationship Table using text search
#'
#' @return
#' @import DT
#' @export
searchRel <- function(term){
flag <- c()
#Check if there is any term that is passed into the function
if(nchar(trimws(term))!= 0){
split <- unlist(strsplit(gsub("[[:punct:]]","",term),"[[:space:]]"))
#Step one -- canonical, RelTable table will go here -- will loadLocalRel.r run at some point before?
localRel <- loadLocalRel()
data <- as.data.frame(localRel[, 1:2, with = FALSE])
#Step two: Scrapped pure regex in this round
for(i in 0:5){
for(k in split){
flag <- c(flag,
data[agrep(k, data[,2], max = i, ignore.case = TRUE),2])
}
}
}
#Check if there are any results
if(length(flag)>0){
#recommended relative rankings
results <- data.frame((table(flag)))
results$series <- (as.character(results$flag))
results <- results[order(-results$Freq),]
results$Rel_score <- 100*results$Freq/max(results$Freq)
#Print results to console
results <- merge(data,results,by.x="Rel_name",by.y="series")
results <- results[,c("Rel_score","Rel_ID","Rel_name")]
print(paste("RESULTS FOR TERM = '", term,"'",sep=""))
print(results)
#payload results <-- need to add Rel_ID
return(results)
} else{
print("No matches")
}
}
#res <- searchRel("county")
searchRel("taggalit")
#' Search Metadata Store Relationship Table using text search
#'
#' @param html  option to render results in an interactive DT
#' @import DT
#' @export
searchRel <- function(term, html=FALSE){
flag <- c()
#Check if there is any term that is passed into the function
if(nchar(trimws(term))!= 0){
split <- unlist(strsplit(gsub("[[:punct:]]","",term),"[[:space:]]"))
#Step one -- canonical, RelTable table will go here -- will loadLocalRel.r run at some point before?
localRel <- loadLocalRel()
data <- as.data.frame(localRel[, 1:2, with = FALSE])
#Step two: Scrapped pure regex in this round
for(i in 0:5){
for(k in split){
flag <- c(flag,
data[agrep(k, data[,2], max = i, ignore.case = TRUE),2])
}
}
}
#Check if there are any results
if(length(flag)>0){
#recommended relative rankings
results <- data.frame((table(flag)))
results$series <- (as.character(results$flag))
results <- results[order(-results$Freq),]
results$Rel_score <- 100*results$Freq/max(results$Freq)
#Print results to console
results <- merge(data,results,by.x="Rel_name",by.y="series")
results <- results[,c("Rel_score","Rel_ID","Rel_name")]
if(html=TRUE){
datatable(results)
}
return(results)
} else{
print("No matches")
}
}
searchRel <- function(term, html = FALSE){
flag <- c()
#Check if there is any term that is passed into the function
if(nchar(trimws(term))!= 0){
split <- unlist(strsplit(gsub("[[:punct:]]","",term),"[[:space:]]"))
#Step one -- canonical, RelTable table will go here -- will loadLocalRel.r run at some point before?
localRel <- loadLocalRel()
data <- as.data.frame(localRel[, 1:2, with = FALSE])
#Step two: Scrapped pure regex in this round
for(i in 0:5){
for(k in split){
flag <- c(flag,
data[agrep(k, data[,2], max = i, ignore.case = TRUE),2])
}
}
}
#Check if there are any results
if(length(flag)>0){
#recommended relative rankings
results <- data.frame((table(flag)))
results$series <- (as.character(results$flag))
results <- results[order(-results$Freq),]
results$Rel_score <- 100*results$Freq/max(results$Freq)
#Print results to console
results <- merge(data,results,by.x="Rel_name",by.y="series")
results <- results[,c("Rel_score","Rel_ID","Rel_name")]
if(html=TRUE){
datatable(results)
}
return(results)
} else{
print("No matches")
}
}
searchRel <- function(term, html = FALSE){
flag <- c()
#Check if there is any term that is passed into the function
if(nchar(trimws(term))!= 0){
split <- unlist(strsplit(gsub("[[:punct:]]","",term),"[[:space:]]"))
#Step one -- canonical, RelTable table will go here -- will loadLocalRel.r run at some point before?
localRel <- loadLocalRel()
data <- as.data.frame(localRel[, 1:2, with = FALSE])
#Step two: Scrapped pure regex in this round
for(i in 0:5){
for(k in split){
flag <- c(flag,
data[agrep(k, data[,2], max = i, ignore.case = TRUE),2])
}
}
}
#Check if there are any results
if(length(flag)>0){
#recommended relative rankings
results <- data.frame((table(flag)))
results$series <- (as.character(results$flag))
results <- results[order(-results$Freq),]
results$Rel_score <- 100*results$Freq/max(results$Freq)
#Print results to console
results <- merge(data,results,by.x="Rel_name",by.y="series")
results <- results[,c("Rel_score","Rel_ID","Rel_name")]
return(results)
} else{
print("No matches")
}
}
library(DT)
if(html=TRUE){
datatable(results)
}
datatable(results)
if(!html){
datatable(results)
}
#' Search Metadata Store Relationship Table using text search
#'
#' @param html  option to render results in an interactive DT
#' @import DT
#' @export
searchRel <- function(term, html = FALSE){
flag <- c()
#Check if there is any term that is passed into the function
if(nchar(trimws(term))!= 0){
split <- unlist(strsplit(gsub("[[:punct:]]","",term),"[[:space:]]"))
#Step one -- canonical, RelTable table will go here -- will loadLocalRel.r run at some point before?
localRel <- loadLocalRel()
data <- as.data.frame(localRel[, 1:2, with = FALSE])
#Step two: Scrapped pure regex in this round
for(i in 0:5){
for(k in split){
flag <- c(flag,
data[agrep(k, data[,2], max = i, ignore.case = TRUE),2])
}
}
}
#Check if there are any results
if(length(flag)>0){
#recommended relative rankings
results <- data.frame((table(flag)))
results$series <- (as.character(results$flag))
results <- results[order(-results$Freq),]
results$Rel_score <- 100*results$Freq/max(results$Freq)
#Print results to console
results <- merge(data,results,by.x="Rel_name",by.y="series")
results <- results[,c("Rel_score","Rel_ID","Rel_name")]
if(!html){
datatable(results)
}
return(results)
} else{
print("No matches")
}
}
searchRel("taggalit")
searchRel("taggalit", html=TRUE)
searchRel("taggalit", html=FALSE)
#' Search Metadata Store Relationship Table using text search
#'
#' @param html  option to render results in an interactive DT
#' @import DT
#' @export
searchRel <- function(term, html = FALSE){
flag <- c()
#Check if there is any term that is passed into the function
if(nchar(trimws(term))!= 0){
split <- unlist(strsplit(gsub("[[:punct:]]","",term),"[[:space:]]"))
#Step one -- canonical, RelTable table will go here -- will loadLocalRel.r run at some point before?
localRel <- loadLocalRel()
data <- as.data.frame(localRel[, 1:2, with = FALSE])
#Step two: Scrapped pure regex in this round
for(i in 0:5){
for(k in split){
flag <- c(flag,
data[agrep(k, data[,2], max = i, ignore.case = TRUE),2])
}
}
}
#Check if there are any results
if(length(flag)>0){
#recommended relative rankings
results <- data.frame((table(flag)))
results$series <- (as.character(results$flag))
results <- results[order(-results$Freq),]
results$Rel_score <- 100*results$Freq/max(results$Freq)
#Print results to console
results <- merge(data,results,by.x="Rel_name",by.y="series")
results <- results[,c("Rel_score","Rel_ID","Rel_name")]
if(html == TRUE){
datatable(results)
}
return(results)
} else{
print("No matches")
}
}
searchRel("taggalit", html=FALSE)
searchRel("taggalit", html=TRUE)
require(DT)
asd=searchRel("taggalit", html=TRUE)
datatable(asd)
#' Search Metadata Store Relationship Table using text search
#'
#' @param html  option to render results in an interactive DT
#' @import DT
#' @export
searchRel <- function(term, html = FALSE){
library(DT)
flag <- c()
#Check if there is any term that is passed into the function
if(nchar(trimws(term))!= 0){
split <- unlist(strsplit(gsub("[[:punct:]]","",term),"[[:space:]]"))
#Step one -- canonical, RelTable table will go here -- will loadLocalRel.r run at some point before?
localRel <- loadLocalRel()
data <- as.data.frame(localRel[, 1:2, with = FALSE])
#Step two: Scrapped pure regex in this round
for(i in 0:5){
for(k in split){
flag <- c(flag,
data[agrep(k, data[,2], max = i, ignore.case = TRUE),2])
}
}
}
#Check if there are any results
if(length(flag)>0){
#recommended relative rankings
results <- data.frame((table(flag)))
results$series <- (as.character(results$flag))
results <- results[order(-results$Freq),]
results$Rel_score <- 100*results$Freq/max(results$Freq)
results <- merge(data,results,by.x="Rel_name",by.y="series")
results <- results[,c("Rel_score","Rel_ID","Rel_name")]
#DT
if(html == TRUE){
datatable(results)
}
return(results)
} else{
print("No matches")
}
}
datatable(asd)
asd=searchRel("taggalit", html=TRUE)
asd=searchRel("taggalit", html=TRUE)
asd=searchRel("taggalit", html=FALSE)
#' Search Metadata Store Relationship Table using text search
#'
#' @param html  option to render results in an interactive DT
#' @import DT
#' @export
searchRel <- function(term, html){
library(DT)
flag <- c()
#Check if there is any term that is passed into the function
if(nchar(trimws(term))!= 0){
split <- unlist(strsplit(gsub("[[:punct:]]","",term),"[[:space:]]"))
#Step one -- canonical, RelTable table will go here -- will loadLocalRel.r run at some point before?
localRel <- loadLocalRel()
data <- as.data.frame(localRel[, 1:2, with = FALSE])
#Step two: Scrapped pure regex in this round
for(i in 0:5){
for(k in split){
flag <- c(flag,
data[agrep(k, data[,2], max = i, ignore.case = TRUE),2])
}
}
}
#Check if there are any results
if(length(flag)>0){
#recommended relative rankings
results <- data.frame((table(flag)))
results$series <- (as.character(results$flag))
results <- results[order(-results$Freq),]
results$Rel_score <- 100*results$Freq/max(results$Freq)
results <- merge(data,results,by.x="Rel_name",by.y="series")
results <- results[,c("Rel_score","Rel_ID","Rel_name")]
#DT
if(html == TRUE){
datatable(results)
}
return(results)
} else{
print("No matches")
}
}
asd=searchRel("taggalit", html=FALSE)
asd=searchRel("taggalit", html=TRUE)
#' Search Metadata Store Relationship Table using text search
#'
#' @param html  option to render results in an interactive DT
#' @import DT
#' @export
searchRel <- function(term, html = FALSE){
library(DT)
flag <- c()
#Check if there is any term that is passed into the function
if(nchar(trimws(term))!= 0){
split <- unlist(strsplit(gsub("[[:punct:]]","",term),"[[:space:]]"))
#Step one -- canonical, RelTable table will go here -- will loadLocalRel.r run at some point before?
localRel <- loadLocalRel()
data <- as.data.frame(localRel[, 1:2, with = FALSE])
#Step two: Scrapped pure regex in this round
for(i in 0:5){
for(k in split){
flag <- c(flag,
data[agrep(k, data[,2], max = i, ignore.case = TRUE),2])
}
}
}
#Check if there are any results
if(length(flag)>0){
#recommended relative rankings
results <- data.frame((table(flag)))
results$series <- (as.character(results$flag))
results <- results[order(-results$Freq),]
results$Rel_score <- 100*results$Freq/max(results$Freq)
results <- merge(data,results,by.x="Rel_name",by.y="series")
results <- results[,c("Rel_score","Rel_ID","Rel_name")]
#DT
if(!html){
datatable(results)
}
return(results)
} else{
print("No matches")
}
}
asd=searchRel("taggalit", html=TRUE)
datatable(results)
#' Search Metadata Store Relationship Table using text search
#'
#' @param html  option to render results in an interactive DT
#' @import DT
#' @export
searchRel <- function(term, html = FALSE){
library(DT)
flag <- c()
#Check if there is any term that is passed into the function
if(nchar(trimws(term))!= 0){
split <- unlist(strsplit(gsub("[[:punct:]]","",term),"[[:space:]]"))
#Step one -- canonical, RelTable table will go here -- will loadLocalRel.r run at some point before?
localRel <- loadLocalRel()
data <- as.data.frame(localRel[, 1:2, with = FALSE])
#Step two: Scrapped pure regex in this round
for(i in 0:5){
for(k in split){
flag <- c(flag,
data[agrep(k, data[,2], max = i, ignore.case = TRUE),2])
}
}
}
#Check if there are any results
if(length(flag) == 0){
print("No matches")
} else {
#recommended relative rankings
results <- data.frame((table(flag)))
results$series <- (as.character(results$flag))
results <- results[order(-results$Freq),]
results$Rel_score <- 100*results$Freq/max(results$Freq)
results <- merge(data,results,by.x="Rel_name",by.y="series")
results <- results[,c("Rel_score","Rel_ID","Rel_name")]
if(!html){
datatable(results)
}
return(results)
}
}
searchRel("taggalit", html=TRUE)
searchRel("taggalit")
